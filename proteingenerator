package classExamples;

import java.util.Random;

public class RandomProteinGenerator {
	char[] proteins = { 'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M',
			'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y' };
	float[] probabilities = { 0.072658f, 0.024692f, 0.050007f, 0.061087f,
			0.041774f, 0.071589f, 0.023392f, 0.052691f, 0.063923f, 0.089093f,
			0.023150f, 0.042931f, 0.052228f, 0.039871f, 0.052012f, 0.073087f,
			0.055606f, 0.063321f, 0.012720f, 0.032955f };
	boolean useUniformFrequencies;

	
	public RandomProteinGenerator(boolean useUniformFrequencies) {
		this.useUniformFrequencies = useUniformFrequencies;
	}

	
	public String getRandomProtein(int length) {
		String randomProtein = new String();
		if (useUniformFrequencies == true) {
			while (length > 0) {
				Random random = new Random();
				int randNum = random.nextInt(20);
				randomProtein = randomProtein + "" + proteins[randNum];
				length = length - 1;
			}
		} else if (useUniformFrequencies == false) {
			while (length > 0) {
				Random random = new Random();
				float randomValue = random.nextFloat();
				float temp = probabilities[0];
				int index = 0;
				while (true) {
					if (randomValue < temp) {
						break;
					}
					index++;
					if (index < 19)
						temp += probabilities[index];
					else
						break;

				}
				randomProtein = randomProtein + "" + proteins[index];
				length = length - 1;
			}

		}
		return randomProtein;

	}

	public double getExpectedFrequency(String protSeq) {
		double expFreq = 1.0;
		if (useUniformFrequencies == true) {
			return Math.pow((1.0 / 20.0), protSeq.length());
		} else if (useUniformFrequencies == false) {
			for (int i = 0; i < protSeq.length(); i++) {
				char cTemp = protSeq.charAt(i);
				int charIndex = 0;
				while (true) {
					if (proteins[charIndex] == cTemp) {
						expFreq *= probabilities[charIndex];
						break;
					}
					charIndex++;
				}
			}
		}
		return expFreq;
	}

	
	public double getFrequencyFromSimulation(String protSeq, int numIterations) {
		int count = 0;
		for (int i = 0; i < numIterations; i++) {
			String temp = getRandomProtein(protSeq.length());
			if (temp.equals(protSeq)) {
				count++;
			}
		}
		return (double) count / (double) numIterations;
	}

	public static void main(String[] args) throws Exception {
		RandomProteinGenerator uniformGen = new RandomProteinGenerator(true);
		 String testProtein = "ACD";
		 int numIterations = 10000000;
		 System.out.println("Name: Heena Desai");
		 System.out.println("The probability of uniform distribution of amino acids is: " + uniformGen.getExpectedFrequency(testProtein)); 
		 System.out.println("Uniform: the number of times the sequence was observed / number of iterations is: " + uniformGen.getFrequencyFromSimulation(testProtein,
		 numIterations)); // should be close
		 RandomProteinGenerator realisticGen = new RandomProteinGenerator(false);
		 System.out.println("The probability of real distribution of amino acids is: " + realisticGen.getExpectedFrequency(testProtein));
		 System.out.println("Real: the number of times the sequence was observed / number of iterations is: " + realisticGen.getFrequencyFromSimulation(testProtein,numIterations)); 

	}
		
}	
